{"./":{"url":"./","title":"gitbook教程简介","keywords":"","body":"gitbook教程简介 GitBook 有网页版和本地版两种，网页版通过 https://www.gitbook.com 网址进行访问，本地版主要是基于 Node.js 环境进行开发。 本教程主要教大家 Gitbook 的本地版使用。 "},"gitbook安装.html":{"url":"gitbook安装.html","title":"1. gitbook安装","keywords":"","body":"gitbook安装教程 1 配置 Node.js 环境 安装node.js版本v12.18.1。 安装成功后，执行命令可查看 node 版本和 npm 版本。 # 查看node版本 node -v # 查看npm版本 npm -v 2 安装 Gitbook npm install -g gitbook-cli gitbook -V #执行后等待安装完毕 gitbook3.2.3 3 初始化项目 创建一个文件夹，并进入到该文件夹中，执行下面命令，初始化 gitbook 项目。 gitbook init 执行结果 info: create SUMMARY.md info: initialization is finished 可以看到创建了 SUMMARY.md 文档，这是电子书的目录文档。 然后创建一个 REAMDE.md 文档，用来对这个项目进行介绍。 GitBook 使用文件 SUMMARY.md 来定义书本的章节和子章节的结构。文件 SUMMARY.md 被用来生成书本内容的预览表。 SUMMARY.md 的格式是一个简单的链接列表，链接的名字是章节的名字，链接的指向是章节文件的路径。 子章节被简单的定义为一个内嵌于父章节的列表。举例如下： # 概要 - [第一章](part1/README.md) - [1.1 第一节](part1/writing.md) - [1.2 第二节](part1/gitbook.md) - [第二章](part2/README.md) - [2.1 第一节](part2/feedback_please.md) - [2.2 第二节](part2/better_tools.md) 4 启动项目 gitbook 在本地启动的命令 gitbook serve gitbook 打包成 HTML 静态文件的命令 gitbook build 5 忽略文件 任何在文件夹下的文件，在最后生成电子书时都会被拷贝到输出目录中，如果想要忽略某些文件，和 Git 一样， Gitbook 会依次读取 .gitignore, .bookignore 和 .ignore 文件来将一些文件和目录排除。 6 配置文件 Gitbook 在编译书籍的时候会读取书籍源码顶层目录中的 book.js 或者 book.json，这里以 book.json 为例，参考 gitbook 文档 可以知道，book.json 常用的配置如下。 { // 书籍信息 \"title\": \"书名\", \"description\": \"描述\", \"isbn\": \"图书编号\", \"author\": \"作者\", \"lang\": \"zh-cn\", // 插件列表 \"plugins\": [], // 插件全局配置 \"pluginsConfig\": { \"fontSettings\": { \"theme\": \"sepia\", \"night\" or \"white\", \"family\": \"serif\" or \"sans\", \"size\": 1 to 4 } }, // 模板变量 \"variables\": { // 自定义 } } 当然，习惯用book.js的同学也可以，book.js只需要将 JSON 数据转为 JS 对象并导出即可，示例如下。 module.exports = { // 书籍信息 title: '书名', description: '描述', isbn: '图书编号', author: '作者', lang: 'zh-cn', // 插件列表 plugins: [], // 插件全局配置 pluginsConfig: {}, // 模板变量 variables: { // 自定义 }, }; "},"gitbook插件.html":{"url":"gitbook插件.html","title":"2. gitbook插件","keywords":"","body":"gitbook插件 Gitbook 最灵活的地方就是有很多插件可以使用，当然如果对插件不满意，也可以自己写插件。所有插件的命名都是以gitbook-plugin-xxx的形式。下面，我们就介绍一些常用的插件。 使用插件前，现在当前项目的根目录中创建一个book.js文件，这是 Gitbook 的配置文件，文件内容可以根据自己来定制，内容格式如下。 // book.js module.exports = { title: 'Gitbook电子书', author: 'z3mu', lang: 'zh-cn', description: 'Gitbook电子书示例项目', }; 想要了解每个插件的具体使用，可以去对应的插件官方文档中查看。 1 搜索插件 在命令行输入下面命令安装搜索插件。 npm install gitbook-plugin-search-pro -g 安装成功后，在book.js中添加插件的配置。 { plugins: ['search-pro']; } 2 代码框插件 在命令行输入下面命令安装代码插件。 npm install gitbook-plugin-code -g 安装成功后，在book.js中添加插件的配置。 { plugins: ['code']; } 3 自定义主题插件 在命令行输入下面命令安装自定义主题插件。 npm install gitbook-plugin-theme-主题名 -g 安装成功后，在book.js中添加插件的配置。 { plugins: [\"theme-主题名\"] } Gitbook 的主题插件都是以gitbook-plugin-theme-xxx形式命名的。 4 菜单折叠插件 在命令行输入下面命令安装菜单栏折叠插件。 npm install gitbook-plugin-expandable-chapters -g 安装成功后，在book.js中添加插件的配置。 { plugins: ['expandable-chapters']; } 5 返回顶部插件 在命令行输入下面命令安装[返回顶部插件()。 npm install gitbook-plugin-back-to-top-button -g 安装成功后，在package.json的dependencies中，我们就能够看到插件了。 更多插件可以从 https://plugins.gitbook.com/ 获取。 建议采用的统一安装方式 在book.js文件内写好插件配置，最后执行gitbook install会自动安装完毕所有book.js文件内写好的插件。 还需要注意的是插件安装完了并非立即就能用的，有的插件还可能需要修改book.js中相应的配置才能使用，这个就需要去看安装的插件的具体说明了。 个人使用的book.js文件 module.exports = { // 书籍信息 title: 'Gitbook教程', description: 'Gitbook教程示例项目', isbn: '图书编号', author: 'z3mu', lang: 'zh-cn', // 插件列表 plugins: ['-lunr', '-search','search-pro','code','zealar','expandable-chapters','back-to-top-button','chapter-fold','expandable-chapters','splitter','intopic-toc'], // 插件全局配置 pluginsConfig: { \"intopic-toc\": { \"label\": \"本篇目录\" } }, // 模板变量 variables: { // 自定义 }, }; gitbook发布为本地文件后内容无法跳转问题解决 在_book文件夹下找到gitbook目录，找到theme.js文件，将文件中if(m)for(n.handler&&内容修改为if(false)for(n.handler&&保存文件后重新打开index.html文件即可实现内容正常跳转。 "},"gitbook部署到github博客.html":{"url":"gitbook部署到github博客.html","title":"3. gitbook部署到github pages","keywords":"","body":"gitbook部署到github pages 部署流程 创建自己的username.github.io仓库，配置个人博客，可以采用hugo部署，这里不详细讲解，需要自行查阅相关资料 创建一个仓库来存放gitbook电子书，如创建gitbook-tutorial仓库 在本地新建一个文件夹，并将自己本地制作好的gitbook电子书_book文件下的所有内容复制到这个新建的文件夹下 使用命令行工具，进入到这个新建的文件夹下 依次执行如下命令 git init #初始化本地仓库 git remote add origin 仓库地址 #和远端仓库建立连接 git checkout -b gh-pages #新建并切换到分支gh-pages git add . #添加当前文件夹下所有文件 git commit -m \"Publish book\" #提交 git push -u origin gh-pages #将刚才的提交内容push到远端仓库的gh-pages分支 最后就可以通过username.github.io/gitbook-tutorial访问该电子书了 脚本一键部署 #确保此脚本文件xxx.sh在gitbook init所在的工作目录下，即存在gitbook init自动生成的README.md和SUMMARY.md两个文件的目录下 rm -rf _book rm -rf gh_pages gitbook build mkdir gh_pages cp -r _book/* gh_pages/ cd gh_pages git init git remote add origin git@github.com:z3mu/gitbook-tutorial.git git checkout -b gh-pages git add . git commit -m 'Publish book' git push -f --set-upstream origin gh-pages "},"markdown语法介绍.html":{"url":"markdown语法介绍.html","title":"4. markdown语法介绍","keywords":"","body":"markdown语法介绍 GitBook 默认使用 Markdown 语法。Markdown 是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与 HTML 混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。 1 标题 要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 () (例如：### 三级标题)。 2 段落 要创建段落，请使用空白行将一行或多行文本进行分隔。 3 强调 3.1 粗体 要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。 Markdown 语法 HTML 预览效果 后面要**加粗**。 后面要加粗。 后面要加粗。 3.2 斜体 要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。 Markdown 语法 HTML 预览效果 后面要*斜体*。 后面要斜体。 后面要斜体。 3.3 粗斜体 要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。 Markdown 语法 HTML 预览效果 后面要***粗斜体***。 后面要粗斜体。 后面要粗斜体。 4 引用 要创建块引用，请在段落前添加一个 > 符号。 > 段落段落段落 渲染效果如下所示： 段落段落段落 4.1 分段引用 块引用可以包含多个段落。为段落之间的空白行添加一个 > 符号。 > 段落段落段落111 > > 段落段落段落222 渲染效果如下所示： 段落段落段落 111 段落段落段落 222 4.2 嵌套引用 块引用可以嵌套。在要嵌套的段落前添加一个 >> 符号。 > 段落段落段落111 > >> 嵌套的段落 渲染效果如下所示： 段落段落段落 111 嵌套的段落 5 列表 可以将多个条目组织成有序或无序列表。 5.1 有序列表 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。 5.2 无序列表 要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。 6 表格 表格也很简单，就是这种方式。 | 列 1 | 列 2 | | ---- | ---- | | a | b | 上面的表格渲染后是这样的： 列 1 列 2 a b 表格默认是左对齐，我们还可以设置居中对齐或者右对齐。 | 列 1 | 列 2 | | :--: | :--: | | a | b | 这种方式是居中对齐，渲染效果是这样的： 列 1 列 2 a b | 列 1 | 列 2 | | ---: | ---: | | a | b | 这种方式是右对齐，渲染方式是这样的。 列 1 列 2 a b 7 代码 要将单词或短语表示为代码，请将其包裹在反引号 (```) 中。 Markdown 语法 HTML 预览效果 At the command prompt, type nano. At the command prompt, type nano. At the command prompt, type nano. 8 分隔线 要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。 *** --- _________________ 以上三个分隔线的渲染效果看起来都一样。 9 超链接 链接文本放在中括号内，链接地址放在后面的括号中，链接 title 可选。 超链接 Markdown 语法代码：[超链接显示名](超链接地址 \"超链接title\") 对应的 HTML 代码：超链接显示名 这是一个链接 [Markdown语法](https://markdown.com.cn)。 渲染效果如下： 这是一个链接 Markdown 语法。 10 图片 要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。 插入图片 Markdown 语法代码：![图片alt](图片链接 \"图片title\")。 对应的 HTML 代码： ![图片标题](assets/avatar.png \"图片描述\") 渲染效果如下： 11 转义字符 要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 (\\) 。 \\* 星号不是列表，会显示出来。 渲染效果如下： * 星号不是列表，会显示出来。 以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。 Character Name \\ backslash ` backtick * asterisk _ underscore { } curly braces [ ] brackets ( ) parentheses # pound sign + plus sign - minus sign (hyphen) . dot ! exclamation mark 12 内嵌 HTML 标签 对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。 比如，我们添加这样一个 HTML 标签。 Hello World 渲染的效果如下： Hello World "}}